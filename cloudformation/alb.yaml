AWSTemplateFormatVersion: '2010-09-09'

Description:
  This template deploys an Application Load Balancer and outputs the ALB name, URL, security group, and target group.
  The ALB, security, and target group names are exported for use elsewhere.
  Leave the certificate ARN parameter blank if you wish to use a non-HTTPS ALB.

Parameters:

  VPC:
    Description: Choose which VPC the Application Load Balancer should be deployed to.
    Type: AWS::EC2::VPC::Id

  Subnets:
    Description: Choose which public subnets the Application Load Balancer should be deployed to.
    Type: List<AWS::EC2::Subnet::Id>

  ALBCertificateArn:
    Description: Enter the SSL certificate ARN for the Application Load Balancer to use if you want to use SSL.
    Type: String

  TargetGroupTrafficPort:
    Description: Enter the traffic port for the target group.
    Type: Number

Conditions: 

  #Condition that states if the ALBCertificateARN parameter is empty, UseSSL will return false and will use port 80 instead of 443.
  UseSSL: !Not [!Equals [!Ref ALBCertificateArn, ""]]

Resources:

  #Create the securty group that allows traffic over HTTP or HTTPS to the load balancer from anywhere.
  SourceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub '${AWS::StackName}-sg'
      GroupDescription: Allow traffic to the load balancer
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: !If 
            - UseSSL
            - 443
            - 80
          ToPort: !If 
            - UseSSL
            - 443
            - 80
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: 'Name'
          Value: !Sub '${AWS::StackName}-alb-sg'

  #Create the Application Load Balancer and assign it to the parameter subnet and the above security group.
  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties: 
      Name: !Sub '${AWS::StackName}-ALB'
      Subnets: !Ref Subnets
      SecurityGroups:
        - !Ref SourceSecurityGroup

  #Create the load balancer listener to allow HTTP or HTTPS from the load balancer into the target group (EC2 instances).
  LoadBalancerListener: 
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref LoadBalancer
      Port: !If 
            - UseSSL
            - 443
            - 80
      Protocol: !If 
            - UseSSL
            - 'HTTPS'
            - 'HTTP'
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref DefaultTargetGroup
      Certificates:
        - CertificateArn:
            !If
            - UseSSL
            - Ref: ALBCertificateArn
            - Ref: 'AWS::NoValue'

  #Creates the default target group and configure the health checks for the load balancer and EC2 instances.
  #The target group manages connections from the load balancer and the ECS instances.
  DefaultTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub '${AWS::StackName}-tg'
      VpcId: !Ref VPC
      Port: !Ref TargetGroupTrafficPort
      Protocol: HTTP
      Matcher: 
        HttpCode: 200-299
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: '/'
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 25
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2

#Output the selected resources to use for cross-stack references.
Outputs:
  LoadBalancer:
    Description: The name of the load balancer.
    Value: !GetAtt LoadBalancer.LoadBalancerName
    Export:
      Name: !Sub "${AWS::StackName}-ALB"

  LoadBalancerUrl:
    Description: The URL of the ALB.
    Value: !GetAtt LoadBalancer.DNSName

  TargetGroup:
    Description: The name of the target group.
    Value: !GetAtt DefaultTargetGroup.TargetGroupName
    Export:
      Name: !Sub "${AWS::StackName}-tg"

  SecurityGroup:
    Description: The name of the ALB security group.
    Value: !GetAtt SourceSecurityGroup.GroupId
    Export:
      Name: !Sub "${AWS::StackName}-alb-sg"